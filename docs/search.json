[{"path":"https://receptiviti.github.io/receptiviti-r/articles/commencement_example.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Commencement Example","text":"First, need load example data package.","code":""},{"path":"https://receptiviti.github.io/receptiviti-r/articles/commencement_example.html","id":"load-data","dir":"Articles","previous_headings":"Setup","what":"Load Data","title":"Commencement Example","text":"’ll looking text commencement speeches given various schools 2000 2015, ’ll load tutorial repository:","code":"speeches <- read.csv(paste0(   \"https://raw.githubusercontent.com/Receptiviti/\",   \"api_tutorials_demos/main/data/commencement_speeches.csv\" )) library(knitr) kable(speeches[1:5, 2:4])"},{"path":"https://receptiviti.github.io/receptiviti-r/articles/commencement_example.html","id":"load-package","dir":"Articles","previous_headings":"Setup","what":"Load Package","title":"Commencement Example","text":"first time using package, see Get Started guide install set API credentials.","code":"library(receptiviti)"},{"path":"https://receptiviti.github.io/receptiviti-r/articles/commencement_example.html","id":"process-text","dir":"Articles","previous_headings":"","what":"Process Text","title":"Commencement Example","text":"Now can send texts API scored. example, ’ll just look Linguistic Inquiry Word Count (LIWC) framework, along standard summary variables: frameworks returned API stored cache, can request different frameworks texts without reprocessing . returns data.frame aligned original input, can add original data:","code":"processed <- receptiviti(   speeches$text_to_score,   frameworks = c(\"summary\", \"liwc\") ) kable(processed[1:5, 2:51]) speeches <- cbind(speeches, processed)"},{"path":"https://receptiviti.github.io/receptiviti-r/articles/commencement_example.html","id":"analyze-scores","dir":"Articles","previous_headings":"","what":"Analyze Scores","title":"Commencement Example","text":"One question might ask speech styles changed time. get , might look trends language style categories:  extreme trends, seems general decrease use articles, increase use adverbs. categories sometimes associate narrative dynamic, less analytic styles, though trend weaker analytical thinking composite:  ’ll leave example, changes time particular interest, look trends full set categories, identify analyze categories based theory.","code":"# identify the language style categories style_columns <- paste0(\"liwc.\", c(   \"personal_pronouns\", \"impersonal_pronouns\", \"articles\", \"auxiliary_verbs\",   \"adverbs\", \"prepositions\", \"conjunctions\", \"negations\", \"quantifiers\" ))  # calculate Pearson's r between each category and the year style_trends <- cor(speeches[, style_columns], speeches$year)[, 1]  kable(data.frame(   \"Correlation with Year\" = style_trends, check.names = FALSE )) library(splot) splot(   speeches[, style_columns] ~ as.character(year), speeches,   title = FALSE, laby = \"Proportion of Words\", labx = \"Year\",   xlas = 2, mar = c(3, 3, 0, 0), prat = c(1, .3) ) splot(   liwc.analytical_thinking ~ year, speeches,   model = TRUE, title = FALSE, laby = \"Analytical Thinking\", labx = \"Year\" ) #>  #> Call: #> liwc.analytical_thinking ~ year #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -0.42430 -0.11471  0.00029  0.11643  0.39212  #>  #> Coefficients: #>              Estimate Std. Error t value Pr(>|t|) #> (Intercept)  7.162326   5.386114   1.330    0.185 #> year        -0.003282   0.002681  -1.224    0.222 #>  #> Residual standard error: 0.1612 on 245 degrees of freedom #> Multiple R-squared:  0.006082,   Adjusted R-squared:  0.002025  #> F-statistic: 1.499 on 1 and 245 DF,  p-value: 0.222"},{"path":"https://receptiviti.github.io/receptiviti-r/articles/commencement_example.html","id":"language-style-matching","dir":"Articles","previous_headings":"Analyze Scores","what":"Language Style Matching","title":"Commencement Example","text":"Another thing might look language style categories language style matching (LSM), measure similarity based categories. One thing might measure identify stylistically unusual speeches: Another thing look stylistic similarity speeches: obvious thing flags duplicated texts aren’t strictly identical. None texts exactly identical: entries duplicated based name-location-year ID: LSM can see least similar speech pairs actually identical. third similar set obvious since apparently different speakers different times, might take look actual texts: probably just issue data, maybe people gave speech.","code":"# see how much each speech matches the average of all speeches ## LIWC function word categories are automatically used if detected library(lingmatch) lsm_baseline <- lingmatch(speeches, mean, type = \"lsm\")  # which are the most stylistically unusual speeches? most_unusual <- order(lsm_baseline$sim)[1:10] kable(cbind(   speeches[most_unusual, 2:4],   LSM_Baseline = lsm_baseline$sim[most_unusual] ), digits = 3, row.names = FALSE) # what makes these speeches unusual? ## calculate differences from the average for each category category_difference <- sweep(   lsm_baseline$processed[most_unusual, ], 2, lsm_baseline$comp, \"-\" ) kable(data.frame(   \"Mean Difference\" = colMeans(category_difference), check.names = FALSE ), digits = 3) # these speeches seem to generally use # fewer personal pronouns and more articles in particular kable(cbind(   speeches[most_unusual, 2:4],   category_difference[, order(-abs(colMeans(category_difference)))[1:2]] ), digits = 3, row.names = FALSE) lsm_pairwise <- lingmatch(speeches, type = \"lsm\", symmetrical = TRUE)  # which speeches are most stylistically similar?  ## set self-matches to 0 diag(lsm_pairwise$sim) <- 0  ## identify the closest match to each speech speeches$match <- max.col(lsm_pairwise$sim) best_match <- diag(lsm_pairwise$sim[, speeches$match])  ## look at the top matches top_matches <- order(-best_match)[1:20] top_matches <- data.frame(a = top_matches, b = speeches[top_matches, \"match\"]) top_matches <- top_matches[!duplicated(apply(   top_matches, 1, function(pair) paste(sort(pair), collapse = \"\") )), ] kable(data.frame(   speeches[top_matches$a, 2:4],   Similarity = best_match[top_matches$a],   speeches[top_matches$b, 2:4],   check.names = FALSE ), digits = 3, row.names = FALSE) anyDuplicated(speeches$text_to_score) #> [1] 0 anyDuplicated(do.call(paste, speeches[, c(\"person\", \"location\", \"year\")])) #> [1] 0 kable(as.data.frame(vapply(   speeches[as.numeric(top_matches[3, ]), c(2:4, 1)],   substr, character(2), 1, 99 )))"},{"path":"https://receptiviti.github.io/receptiviti-r/articles/receptiviti.html","id":"install-and-load","dir":"Articles","previous_headings":"","what":"Install and Load","title":"Get Started","text":"First, download install R system: Windows | Mac | Linux may also want download install RStudio nice interface R. , R console, install package; needs done : time start R session, load package:","code":"install.packages(\"receptiviti\") library(receptiviti)"},{"path":"https://receptiviti.github.io/receptiviti-r/articles/receptiviti.html","id":"set-up-api-credentials","dir":"Articles","previous_headings":"","what":"Set Up API Credentials","title":"Get Started","text":"can find API key secret dashboard. can set credentials R permanently temporarily:","code":""},{"path":"https://receptiviti.github.io/receptiviti-r/articles/receptiviti.html","id":"permanent","dir":"Articles","previous_headings":"Set Up API Credentials","what":"Permanent","title":"Get Started","text":"Open create ~/.Renviron file: add environment variables key secret: restart R changes take effect.","code":"usethis::edit_r_environ() RECEPTIVITI_KEY=\"\" RECEPTIVITI_SECRET=\"\""},{"path":"https://receptiviti.github.io/receptiviti-r/articles/receptiviti.html","id":"temporary","dir":"Articles","previous_headings":"Set Up API Credentials","what":"Temporary","title":"Get Started","text":"Add key secret, run start session:","code":"Sys.setenv(   RECEPTIVITI_KEY = \"\",   RECEPTIVITI_SECRET = \"\" )"},{"path":"https://receptiviti.github.io/receptiviti-r/articles/receptiviti.html","id":"confirm-credentials","dir":"Articles","previous_headings":"Set Up API Credentials","what":"Confirm Credentials","title":"Get Started","text":"Check API reachable, credentials recognized: credentials recognized, ’ll get response like :","code":"receptiviti_status() #> Status: OK #> Message: Hello there, World! receptiviti_status(key = 123, secret = 123) #> Status: ERROR #> Message: 401 (1411): Unrecognized API key pair."},{"path":[]},{"path":"https://receptiviti.github.io/receptiviti-r/articles/receptiviti.html","id":"loaded-text","dir":"Articles","previous_headings":"Enter Your Text","what":"Loaded Text","title":"Get Started","text":"texts already R, can enter directly. can single character: character vector: data.frame:","code":"results <- receptiviti(\"texts to score\") results <- receptiviti(c(\"text one\", \"text two\")) data <- data.frame(texts = c(\"text a\", \"text b\"))  # directly results <- receptiviti(data$texts)  # by column name results <- receptiviti(data, text_column = \"texts\")"},{"path":"https://receptiviti.github.io/receptiviti-r/articles/receptiviti.html","id":"text-in-files","dir":"Articles","previous_headings":"Enter Your Text","what":"Text in files","title":"Get Started","text":"can enter paths files containing separate texts line: comma delimited file column containing text. , text_column argument specifies column contains text: can point directory containing text files: default .txt files looked , can specify .csv files file_type argument:","code":"# single results <- receptiviti(\"../files/file.txt\")  # multiple results <- receptiviti(c(\"../files/file1.txt\", \"../files/file2.txt\")) # single results <- receptiviti(\"../files/file.csv\", text_column = \"text\")  # multiple results <- receptiviti(   c(\"../files/file1.csv\", \"../files/file2.csv\"),   text_column = \"text\" ) results <- receptiviti(\"../files\") results <- receptiviti(   \"../files\",   text_column = \"text\", file_type = \"csv\" )"},{"path":[]},{"path":"https://receptiviti.github.io/receptiviti-r/articles/receptiviti.html","id":"returned-results","dir":"Articles","previous_headings":"Use Results","what":"Returned Results","title":"Get Started","text":"default, results returned data.frame, row text, columns framework variable: , first column (text_hash) MD5 hash text, identifies unique texts, stored main cache. entered text can also included return_text argument: can also select frameworks returned: default, single framework column names without framework name, can retain framework_prefix = TRUE: can also results returned list frameworks, might make easier work separately:","code":"results <- receptiviti(\"texts to score\") results[, 1:4] #>                          text_hash summary.word_count #> 1 b771013281f84420644c3fd2289f3d9b                  3 #>   summary.words_per_sentence summary.sentence_count #> 1                          3                      1 results <- receptiviti(\"texts to score\", return_text = TRUE) results[, 1:3] #>             text                        text_hash summary.word_count #> 1 texts to score b771013281f84420644c3fd2289f3d9b                  3 results <- receptiviti(\"texts to score\", frameworks = \"liwc\") results[, 1:4] #>                          text_hash analytical_thinking clout authentic #> 1 b771013281f84420644c3fd2289f3d9b                0.99   0.5      0.01 results <- receptiviti(   \"texts to score\",   frameworks = \"liwc\", framework_prefix = TRUE ) results[, 1:3] #>                          text_hash liwc.analytical_thinking liwc.clout #> 1 b771013281f84420644c3fd2289f3d9b                     0.99        0.5 results <- receptiviti(\"texts to score\", as_list = TRUE) results$personality[, 1:4] #>                          text_hash extraversion   active assertive #> 1 b771013281f84420644c3fd2289f3d9b     40.60506 43.54977  32.54014"},{"path":"https://receptiviti.github.io/receptiviti-r/articles/receptiviti.html","id":"aligning-results","dir":"Articles","previous_headings":"Use Results","what":"Aligning Results","title":"Get Started","text":"Results returned way aligns text enter originally, including duplicates invalid entries. means can add results object original data: can also provide vector unique IDs returned results can merged data:","code":"data <- data.frame(id = 1:4, text = c(\"text a\", NA, \"\", \"text a\")) results <- receptiviti(data$text)  # combine data and results cbind(data, results)[, 1:4] #>   id   text                        text_hash summary.word_count #> 1  1 text a 468c24aa7dac18b7517469361676bffb                  2 #> 2  2   <NA>                             <NA>                 NA #> 3  3                                    <NA>                 NA #> 4  4 text a 468c24aa7dac18b7517469361676bffb                  2 results <- receptiviti(c(\"text a\", \"text b\"), id = c(\"a\", \"b\")) results[, 1:3] #>   id                        text_hash summary.word_count #> 1  a 468c24aa7dac18b7517469361676bffb                  2 #> 2  b 0601f4c2ab4153a2fc4a1dc506c5fb9e                  2  # merge with a new dataset data <- data.frame(   id = c(\"a1\", \"b1\", \"a2\", \"b2\"),   type = c(\"a\", \"b\", \"a\", \"b\") ) merge(data, results, by.x = \"type\", by.y = \"id\")[, 1:4] #>   type id                        text_hash summary.word_count #> 1    a a1 468c24aa7dac18b7517469361676bffb                  2 #> 2    a a2 468c24aa7dac18b7517469361676bffb                  2 #> 3    b b1 0601f4c2ab4153a2fc4a1dc506c5fb9e                  2 #> 4    b b2 0601f4c2ab4153a2fc4a1dc506c5fb9e                  2"},{"path":"https://receptiviti.github.io/receptiviti-r/articles/receptiviti.html","id":"saved-results","dir":"Articles","previous_headings":"Use Results","what":"Saved Results","title":"Get Started","text":"Results can also saved .csv file: can compressed: case, compressed file 84% smaller.","code":"receptiviti(\"texts to score\", \"../results.csv\", overwrite = TRUE) results <- read.csv(\"../results.csv\") results[, 1:4] #>                          text_hash summary.word_count #> 1 b771013281f84420644c3fd2289f3d9b                  3 #>   summary.words_per_sentence summary.sentence_count #> 1                          3                      1 receptiviti(   \"texts to score\", \"../results.csv.xz\",   compress = TRUE, overwrite = TRUE ) results <- read.csv(\"../results.csv.xz\") results[, 1:4] #>                          text_hash summary.word_count #> 1 b771013281f84420644c3fd2289f3d9b                  3 #>   summary.words_per_sentence summary.sentence_count #> 1                          3                      1"},{"path":"https://receptiviti.github.io/receptiviti-r/articles/receptiviti.html","id":"preserving-results","dir":"Articles","previous_headings":"","what":"Preserving Results","title":"Get Started","text":"receptiviti function tries avoid sending texts API much possible: part preparation process, excludes duplicates invalid texts. primary cache Arrow database located cache augment. format determined cache_format. can skip checking initially still writing results cache_overwrite = TRUE. can cleared clear_cache = TRUE. Responses stored tempdir() .json files named bundle’s MD5 hash. can avoid using cache request_cache = FALSE. cache cleared R restarted. want make sure texts sent API, can use make_request = FALSE. use primary request cache, fail texts found . call fails results can written cache returned, received responses still request cache, deleted R restarted. want preserve need restart R, can move cached responses tempdir(), replace restarting.","code":""},{"path":"https://receptiviti.github.io/receptiviti-r/articles/receptiviti.html","id":"handling-big-data","dir":"Articles","previous_headings":"","what":"Handling Big Data","title":"Get Started","text":"receptiviti function handle splitting texts bundles, limit many texts can process come system’s amount random access memory (RAM). Several thousand texts fine, getting millions texts, may able results loaded . get around , can fully process subsets texts. benefit processing texts requests can parallelized, RAM intensive, primary cache updated less frequently (updated end complete run). also parallelize batches, sure set cores 1 (disable function’s parallelization) cache FALSE (avoid attempting read cache written another instance). Disabling cache also efficient, may want ensure sending duplicate texts calls. function handles duplicate texts within calls (ever sending unique texts), depends cache avoid sending duplicates calls.","code":""},{"path":"https://receptiviti.github.io/receptiviti-r/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Receptiviti Inc.. Funder, copyright holder. Kent English. Maintainer. Micah Iserman. Author, contractor.","code":""},{"path":"https://receptiviti.github.io/receptiviti-r/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Receptiviti Inc. (2022). receptiviti: Text Analysis Receptiviti API. url: receptiviti.github.io/receptiviti-r","code":"@Manual{,   title = {receptiviti: Text Analysis Through the Receptiviti API},   author = {{Receptiviti Inc.}},   year = {2022},   url = {https://receptiviti.github.io/receptiviti-r/}, }"},{"path":"https://receptiviti.github.io/receptiviti-r/index.html","id":"receptiviti","dir":"","previous_headings":"","what":"Text Analysis Through the Receptiviti API","title":"Text Analysis Through the Receptiviti API","text":"R package process text Receptiviti API.","code":""},{"path":"https://receptiviti.github.io/receptiviti-r/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Text Analysis Through the Receptiviti API","text":"Download R r-project.org, install package R console: Release (version 0.1.0) Development (version 0.1.1) load package:","code":"install.packages(\"receptiviti\") # install.packages(\"remotes\") remotes::install_github(\"Receptiviti/receptiviti-r\") library(receptiviti)"},{"path":"https://receptiviti.github.io/receptiviti-r/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"Text Analysis Through the Receptiviti API","text":"Makes requests Receptiviti API, working around size rate limitations. Avoids sending invalid identical texts, repeating requests session. Builds local database returned results avoid making repeat requests longer-term.","code":""},{"path":"https://receptiviti.github.io/receptiviti-r/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Text Analysis Through the Receptiviti API","text":"","code":"# score a single text single <- receptiviti(\"a text to score\")  # score multiple texts, and write results to a file multi <- receptiviti(c(\"first text to score\", \"second text\"), \"filename.csv\")  # score texts in separate files ## defaults to look for .txt files file_results <- receptiviti(\"./path/to/txt_folder\")  ## could be .csv file_results <- receptiviti(   \"./path/to/csv_folder\",   text_column = \"text\", file_type = \"csv\" )  # score texts in a single file results <- receptiviti(\"./path/to/file.csv\", text_column = \"text\")"},{"path":"https://receptiviti.github.io/receptiviti-r/index.html","id":"api-access","dir":"","previous_headings":"","what":"API Access","title":"Text Analysis Through the Receptiviti API","text":"access API, need load key secret, found dashboard. can enter arguments function call, default looked environment variables: can store R environment file permanently: set temporarily:","code":"RECEPTIVITI_KEY=\"32lettersandnumbers\" RECEPTIVITI_SECRET=\"56LettersAndNumbers\" # opens ~/.Renviron; after editing, save and restart R usethis::edit_r_environ() Sys.setenv(   RECEPTIVITI_KEY = \"32lettersandnumbers\",   RECEPTIVITI_SECRET = \"56LettersAndNumbers\" )"},{"path":"https://receptiviti.github.io/receptiviti-r/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 Receptiviti Inc. Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://receptiviti.github.io/receptiviti-r/reference/receptiviti.html","id":null,"dir":"Reference","previous_headings":"","what":"Receptiviti API — receptiviti","title":"Receptiviti API — receptiviti","text":"main function access Receptiviti API.","code":""},{"path":"https://receptiviti.github.io/receptiviti-r/reference/receptiviti.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Receptiviti API — receptiviti","text":"","code":"receptiviti(text, output = NULL, id = NULL, text_column = NULL,   id_column = NULL, file_type = \"txt\", return_text = FALSE,   frameworks = getOption(\"receptiviti_frameworks\", \"all\"),   framework_prefix = TRUE, as_list = FALSE, bundle_size = 1000,   collapse_lines = FALSE, retry_limit = 10, clear_cache = FALSE,   clear_scratch_cache = TRUE, request_cache = TRUE, cores = detectCores()   - 1, use_future = FALSE, in_memory = TRUE, verbose = FALSE,   overwrite = FALSE, compress = FALSE, make_request = TRUE,   text_as_paths = FALSE, cache = Sys.getenv(\"RECEPTIVITI_CACHE\"),   cache_overwrite = FALSE,   cache_format = Sys.getenv(\"RECEPTIVITI_CACHE_FORMAT\", \"parquet\"),   key = Sys.getenv(\"RECEPTIVITI_KEY\"),   secret = Sys.getenv(\"RECEPTIVITI_SECRET\"),   url = Sys.getenv(\"RECEPTIVITI_URL\"))  receptiviti_status(url = Sys.getenv(\"RECEPTIVITI_URL\"),   key = Sys.getenv(\"RECEPTIVITI_KEY\"),   secret = Sys.getenv(\"RECEPTIVITI_SECRET\"), verbose = TRUE,   include_headers = FALSE)"},{"path":"https://receptiviti.github.io/receptiviti-r/reference/receptiviti.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Receptiviti API — receptiviti","text":"text character vector text processed, path directory containing files, vector file paths. single path directory, file collapsed single text. path file files, line row treated separate text, unless collapse_lines TRUE. output Path .csv file write results . already exists, set overwrite TRUE overwrite . id Vector unique IDs length text, included results. text_column, id_column Column name text/id, text matrix-like object, path csv file. file_type File extension search , text path directory containing files read . return_text Logical; TRUE, text included first column result. frameworks vector frameworks include results . Texts always scored available framework -- just specifies return. Defaults , return scored frameworks. Can set receptiviti_frameworks option (e.g., options(receptiviti_frameworks = c(\"liwc\", \"sallee\"))). framework_prefix Logical; FALSE, remove framework prefix column names, may result duplicates. specified, 1 framework selected, as_list TRUE, default remove prefixes. as_list Logical; TRUE, returns list frameworks separate entries. bundle_size Number texts include request; 1 1,000. collapse_lines Logical; TRUE, text contains paths files, file treated single text. retry_limit Maximum number times request can retried hitting rate limit. clear_cache Logical; TRUE, clear existing files cache. Use cache_overwrite want fresh results without clearing disabling cache. Use cache = FALSE disable cache. clear_scratch_cache Logical; FALSE, preserve bundles written in_memory TRUE, request made. request_cache Logical; FALSE, always make fresh request, rather using response previous identical request. cores Number CPU cores split bundles across, multiple bundles. See Parallelization section. use_future Logical; TRUE, uses future back-end process bundles, case, parallelization can controlled plan function (e.g., plan(\"multisession\") use multiple cores); required see progress bars using multiple cores. See Parallelization section. in_memory Logical; FALSE, write bundles temporary files, load requested. verbose Logical; TRUE, show status messages. overwrite Logical; TRUE, overwrite existing output file. compress Logical; TRUE, save xz-compressed file. make_request Logical; FALSE, request made. useful want sure load one caches, sure results exist ; error encounters texts source . text_as_paths Logical; TRUE, ensures text treated vector file paths. Otherwise, determined NAs text every entry 500 characters long. cache Path directory save unique results reuse; defaults Sys.getenv(\"RECEPTIVITI_CACHE\"). See Cache section details. cache_overwrite Logical; TRUE, write results cache without reading . used want fresh results cached without clearing cache. cache_format Format cache database; see FileFormat. Defaults Sys.getenv(\"RECEPTIVITI_CACHE_FORMAT\"). key API Key; defaults Sys.getenv(\"RECEPTIVITI_KEY\"). secret API Secret; defaults Sys.getenv(\"RECEPTIVITI_SECRET\"). url API endpoint; defaults Sys.getenv(\"RECEPTIVITI_URL\"), defaults \"https://api.receptiviti.com/\". include_headers Logical; TRUE, receptiviti_status's verbose message include HTTP headers.","code":""},{"path":"https://receptiviti.github.io/receptiviti-r/reference/receptiviti.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Receptiviti API — receptiviti","text":"data.frame columns text (return_text TRUE; originally entered text), id (one provided), text_hash (MD5 hash text), scores included framework (e.g., summary.word_count liwc.). as_list TRUE, returns list named entry containing data.frame framework.","code":""},{"path":"https://receptiviti.github.io/receptiviti-r/reference/receptiviti.html","id":"cache","dir":"Reference","previous_headings":"","what":"Cache","title":"Receptiviti API — receptiviti","text":"default, results unique texts saved Arrow database cache location (Sys.getenv(\"RECEPTIVITI_CACHE\")), retrieved subsequent requests. ensures exact texts re-sent API. , however, add processing time disc space usage. cache location specified, default directory (receptiviti_cache) looked system's temporary directory (usually parent tempdir()). exist, asked created. can disable prompt receptiviti.cache_prompt option (options(receptiviti.cache_prompt = FALSE)). cache_format arguments (RECEPTIVITI_CACHE_FORMAT environment variable) can used adjust format cache. can use cache independently open_database(Sys.getenv(\"RECEPTIVITI_CACHE\")). can set cache argument FALSE prevent cache used, might make sense expect need reprocess . can also set clear_cache argument TRUE clear cache used , may useful cache gotten big, know new results returned. Even cached result exists, reprocessed variables new results, depends least 1 uncached result. , instance, add framework account want reprocess previously processed set texts, need first clear cache. Either way, duplicated texts within call sent . request_cache argument controls temporary cache bundle request. cleared R session ends. might want set FALSE new framework becomes available account want process set text already processed current R session without restarting. Another temporary cache made in_memory FALSE, default processing parallel (cores 1 use_future TRUE). contains file unique bundle, read needed parallel workers.","code":""},{"path":"https://receptiviti.github.io/receptiviti-r/reference/receptiviti.html","id":"parallelization","dir":"Reference","previous_headings":"","what":"Parallelization","title":"Receptiviti API — receptiviti","text":"texts split bundles based bundle_size argument. bundle represents single request API, limited 1000 texts total size 10 MB. one bundle either cores greater 1 use_future TRUE (externally specified plan), bundles processed multiple cores. Using future also allows progress bars specified externally handlers; see examples.","code":""},{"path":"https://receptiviti.github.io/receptiviti-r/reference/receptiviti.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Receptiviti API — receptiviti","text":"","code":"if (FALSE) {  # check that the API is available, and your credentials work receptiviti_status()  # score a single text single <- receptiviti(\"a text to score\")  # score multiple texts, and write results to a file multi <- receptiviti(c(\"first text to score\", \"second text\"), \"filename.csv\")  # score many texts in separate files ## defaults to look for .txt files file_results <- receptiviti(\"./path/to/txt_folder\")  ## could be .csv file_results <- receptiviti(   \"./path/to/csv_folder\",   text_column = \"text\", file_type = \"csv\" )  # score many texts from a file, with a progress bar ## set up cores and progress bar (only necessary if you want the progress bar) future::plan(\"multisession\") progressr::handlers(global = TRUE) progressr::handlers(\"progress\")  ## make request results <- receptiviti(   \"./path/to/largefile.csv\",   text_column = \"text\", use_future = TRUE ) }"}]
